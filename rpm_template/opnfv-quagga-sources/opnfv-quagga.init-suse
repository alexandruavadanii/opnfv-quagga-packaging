#!/bin/bash
#
# /etc/init.d/opnfv-quagga
#

### BEGIN INIT INFO
# Provides:          opnfv-quagga
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 5
# Default-Stop:      0 1 6
# Short-Description: OPNFV Quagga 
# Description: Quagga with Thrift Interface for OPNFV
### END INIT INFO

RETVAL=0
PROG="opnfv-quagga"
LOCK_FILE=/var/lock/subsys/opnfv-quagga
EXECUTABLE=/usr/lib/quagga/qthrift/opnfv-quagga.sh
PIDDIR=/var/run/quagga
PIDFILE=$PIDDIR/opnfv-quagga.pid

test -x $EXECUTABLE || exit 5

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num><num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
    start)
        echo -n $"Starting $PROG: "

        # The process must be configured first.
        [ -f $CONF_FILE ] || exit 6
        if [ `id -u` -ne 0 ]; then
            (exit 4)
        fi

	install -m 755 -o quagga -g quagga -d $PIDDIR
        startproc $EXECUTABLE
        if [ -f $PIDFILE ]; then
            if ps -p `cat $PIDFILE` >> /dev/null; then
                (exit 0)
            fi
        else
            (exit 7)
        fi
        rc_status -v
        ;;
    stop)
        ## Stop daemon with killproc(8) and if this fails
        ## set echo the echo return value.
        echo -n $"Shutting down $PROG: "
        if [ -f $PIDFILE ]; then
            DAEMONPID=`cat $PIDFILE`
            PARENTPID=`ps -o pgid= $DAEMONPID | grep -o '[0-9]*'`
            if [ "$PPID" != "" ]; then
                kill -TERM -$PARENTPID
                RETVAL=$?
                rm -f $LOCK_FILE
                rm -f $PIDFILE
                (exit $RETVAL)
            else
                (exit 7)
            fi
        else
            (exit 7)
        fi

        # Remember status and be verbose
        rc_status -v
        ;;
    try-restart)
        ## Stop the service and if this succeeds (i.e. the
        ## service was running before), start it again.
        ## Note: try-restart is not (yet) part of LSB (as of 0.7.5)
        $0 status >/dev/null &&  $0 restart

        # Remember status and be quiet
        rc_status
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start

        # Remember status and be quiet
        rc_status
        ;;
    force-reload)
        ## Signal the daemon to reload its config. Most daemons
        ## do this on signal 1 (SIGHUP).
        ## If it does not support it, restart.

        echo -n "Reload $PROG: "
        $0 stop  &&  $0 start
        rc_status
        ;;
    reload)
        ## Like force-reload, but if daemon does not support
        ## signalling, do nothing (!)

        rc_failed 3
        rc_status -v
        ;;
    status)
        echo -n "Checking $PROG: "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Status has a slightly different for the status command:
        # 0 - service running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running

        # NOTE: checkproc returns LSB compliant status values.
	if [ -f $PIDFILE ]; then
            if ps -p `cat $PIDFILE` >> /dev/null; then
	        (exit 0)
            else
                (exit 1)
            fi
	else
            (exit 3)
	fi
        rc_status -v
        ;;
    *)
        echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}"
        exit 1
        ;;
esac
rc_exit

